//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Megasoft2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Adr_LoggingEntities : DbContext
    {
        public Adr_LoggingEntities()
            : base("name=Adr_LoggingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Adr_DBLog_Analogs> Adr_DBLog_Analogs { get; set; }
    
        public virtual ObjectResult<sp_GetTankLevels_Result> sp_GetTankLevels(Nullable<System.Guid> guid, string tagname, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> getTemperature)
        {
            var guidParameter = guid.HasValue ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(System.Guid));
    
            var tagnameParameter = tagname != null ?
                new ObjectParameter("Tagname", tagname) :
                new ObjectParameter("Tagname", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var getTemperatureParameter = getTemperature.HasValue ?
                new ObjectParameter("GetTemperature", getTemperature) :
                new ObjectParameter("GetTemperature", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTankLevels_Result>("sp_GetTankLevels", guidParameter, tagnameParameter, fromDateParameter, toDateParameter, getTemperatureParameter);
        }
    
        public virtual ObjectResult<sp_GetTankMovements_Result> sp_GetTankMovements(Nullable<System.Guid> entryGuid, string tagname, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var entryGuidParameter = entryGuid.HasValue ?
                new ObjectParameter("EntryGuid", entryGuid) :
                new ObjectParameter("EntryGuid", typeof(System.Guid));
    
            var tagnameParameter = tagname != null ?
                new ObjectParameter("Tagname", tagname) :
                new ObjectParameter("Tagname", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTankMovements_Result>("sp_GetTankMovements", entryGuidParameter, tagnameParameter, fromDateParameter, toDateParameter);
        }
    }
}
